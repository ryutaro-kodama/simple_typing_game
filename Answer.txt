学籍番号：18B05786
氏名：児玉龍太郎

1. 要求に対する実装方法
課題文の全ての要求を実装した。

1-1. 入力対象を単語と文から選択できる
指定されたファイルの文章を、単語ごとに読み込むクラス"ReadFileByWord"と、行ごとに読み込むクラス"ReadFileByRow"を作成。
両者の違いは「文章の読み込み方」だけであり、その他の機能は共通のため、抽象クラス"ReadFile"クラスを定義。
これで多態性によって、"main"関数では"ReadFile"型の変数を用意しておくだけで、「単語ごと」か「行ごと」かの違いを気にする必要がなくなった。


1-2. 複数のテキストファイルからタイピングする内容を選択できる
これは"Select"を継承した"SelectFile"クラスで実装。
("Select"クラスについては、2-1で詳述)
getChoicedメソッドで、選択したファイル名を返すように実装。
用意したファイルは全3種類。


1-3. 入力対象はランダムに決定される
まず、読み込んだ単語や行は"ReadFile"クラスのフィールドquestions配列に保持している。
(これは「ファイルの読み込み」と、「問題が入った配列の保持・操作」を別クラスにするべきだった)
そこで、課題文のようにRandomクラスを使うのではなく、"Collections.shuffle()"を使用した。
これを用いるメソッドが、"ReadFile"クラス内のshuffleQuestionsメソッドである。


1-4. 入力は行単位で行う
"Operation"クラスのinputAnswerメソッドで、標準入力からの受け取りを行っている。
そして、同じクラスのsetAnswerメソッドで、"Operation"クラスのフィールドAnswerに保持するようにしている。


1-5. 時間計測がある
まず、"System.currentTimeMillis()"を扱ってタイム計測を行うため、必要なメソッドを用意した"TimeKeeper"クラスを作成。
更に、1問ごとの経過時間を入れる配列フィールドelapsedTimesとそれに対する操作をもつ、"ElapsedTime"クラスを作成。

タイプ速度の実際の計算は、"Operation"クラスのcalcSpeedメソッドで行っている。


1-6. タイピングは何らかの基準によって終了する
"Operation"クラス内のdoQuestionOrNotメソッドで実装。これがtrueを返す間、ゲームを繰り返すようにしている。
更にdoQuestionOrNotは、"ReadFile"クラスのメソッドhasNowIndex(問題がまだ存在するか)と、"Operation"クラスの抽象メソッドoverLimitOrNotをANDで結んだものを返している。
これにより、ゲーム形式毎の具体的なゲーム終了基準を、各継承先に依存させるようにした。


1-7. 採点機能
採点をするメソッドcalcScoreと、その採点結果を表示するメソッドprintScoreを、共に抽象メソッドとして"Operation"内に定義。
"Operation"クラスを継承した4つのクラスで、その内容を具体的に定めている。
これは、ゲーム形式によって、採点方法を変えたかったからである。
(*2-も参照していただきたい。)


1-8. 結果記録機能
"Operation"クラスの、printResultで実装。


1-9. そのほかあなたがタイピングソフトにあったら面白いと思う機能
次章に詳述。


2. 自分で考えた機能

2-1. 選択は全て標準入力から、数字1つで行えるようにし、ユーザーの入力間違いにも対応した
ゲームを始める前に、使うテキストファイルやゲーム形式など、いくつかの選択項目がある。
この「選択」という動作は、選択内容の違いはあるが、「選択を受け取る」「選択に応じて何かを返す」などの機能は同じであるため、抽象クラス"Select"を定義。
(これはインターフェースで実装した方が適切だったかもしれない。)

そして、"Select"クラス内のinputメソッドで選択肢の受け取りを行っているが、選択肢に該当する数字を入力してもらうことを想定している。
ただ、入力間違い等にも対応するため、同メソッド内で、選択肢にないものを選んだ場合には自動的に0を選ぶようにした。
これにより、何も入れてないのに間違えてEnterを押したり、文字を入力した場合にも、実行が止まらないようにした。


2-2. ユーザーがゲームの形式を選べるようにした
ゲーム終了の基準はゲーム形式に応じて決まるようにした。
そこでまずは、ゲーム形式を選択するクラス"SelectMode"クラスを作成。
入力の内容に応じて、以下の4つのクラスのいずれかのインスタンスを返すよう、getChoicedメソッドを具体的に記述した。

次に具体的なゲームの操作内容だが、「終了判定」や「得点計算方法」などはゲーム形式によって違いはある。
しかし「問題の出力」「解答の入力」「正誤判定」「次の問題への遷移」など、この一連の流れはどの形式によっても同じであるため、抽象クラス"Operation"を作成。
そして、"Operation"を継承した以下の4つのクラスを作成。
・OperationAccuracyAtack(編集距離からタイピングの正確性をスコア化)
・OperationElapsedTimeAtack(一定数の問題を解くのに何秒かかったかをスコア化)
・OperationTimeAtack(制限時間内の解答数をスコア化)
・OperationTypeSpeedAtack(1秒間のタイプ速度をスコア化)
これで多態性によって、ゲーム形式の違いを"main"関数で意識することなく、対応することができた。


2-3. 採点方法の1つに、編集距離を用いた
編集距離とは、ある2つの文字列が、「挿入」「削除」「置換」のみで何回の操作で一致するかをコストとして表したものである。
この実装には、課題文にあったように動的計画法を採用し、"EditDistance"クラス内で必要なメソッドを定義している。
この"EditDistance"がうまく動くかをチェックするため、同じパッケージ内にDemoを用意して、動作を確認した。


3. 参考
テキストファイルを作成するのに、以下を参考にした。
・Lorem Ipsum (https://www.lipsum.com/)
・日常英会話の基本英単語（１～１００） (https://honmono-eigo.com/word3000/quickresponse1)

また、編集距離について以下を参考にした
・編集距離（レーベンシュタイン距離）の求め方 (https://mathwords.net/hensyukyori)